name: Update GitHub Secret

on:
  workflow_dispatch:

jobs:
  update-secret:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Public Key
        id: get_public_key
        run: |
          response=$(curl -H "Authorization: token ${{ secrets.PAT_TEST_SECRET }}" \
                           -H "Accept: application/vnd.github.v3+json" \
                           https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key)
          echo "::set-output name=public_key::$(echo $response | jq -r .key)"
          echo "::set-output name=key_id::$(echo $response | jq -r .key_id)"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: pip install requests pybase64 cryptography pycryptodome   


      - name: Update GitHub Secret
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TEST_SECRET }}
          REPO: ${{ github.repository }}  # Nome do repositório no formato "owner/repo"
          SECRET_NAME: 'TEST_SECRET'  # Nome do segredo que você deseja atualizar
          NEW_SECRET_VALUE: 'FALSE'  # Novo valor do segredo
          KEY_ID: ${{ steps.get_public_key.outputs.key_id }}
          PUBLIC_ID: ${{ steps.get_public_key.outputs.public_key }}
        run: |
          import requests
          import base64
          import os

          # Prepare o valor do segredo
          new_secret_value = os.environ['NEW_SECRET_VALUE']
          encoded_value = base64.b64encode(new_secret_value.encode()).decode()

          # URL para a API do GitHub
          url = f"https://api.github.com/repos/{os.environ['REPO']}/actions/secrets/{os.environ['SECRET_NAME']}"

          # Cabeçalhos da requisição
          headers = {
              'Authorization': f'token {os.environ["GITHUB_TOKEN"]}',
              'Accept': 'application/vnd.github.v3+json'
          }

          # Obter a chave pública para encriptação

          key_id = os.environ['KEY_ID']
          public_key = os.environ['PUBLIC_ID']

          # Encriptar o novo valor do segredo
          from cryptography.fernet import Fernet
          import json

          # Criar um Fernet com a chave pública
          fernet = Fernet(public_key.encode())
          encrypted_value = fernet.encrypt(encoded_value.encode())

          # Atualizar o segredo
          data = {
              'encrypted_value': encrypted_value.decode(),
              'key_id': key_id
          }

          requests.put(url, headers=headers, json=data)
  
      # - name: Update GitHub Secret
      #   env:
      #     secret_value: 'FALSE'  # Substitua pelo valor que deseja criptografar
      #     public_key: ${{ steps.get_public_key.outputs.public_key }}
      #     key_id: ${{ steps.get_public_key.outputs.key_id }}
      #   run: |
      #     python ./.github/workflows/script2.py

      # - name: Update Secret
      #   run: |
      #     curl -X PUT -H "Authorization: token ${{ secrets.PAT_TEST_SECRET }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/actions/secrets/NOME_DO_SECRETO -d '{"encrypted_value": "${{ steps.encrypt_secret.outputs.encrypted_value }}", "key_id": "${{ steps.get_public_key.outputs.key_id }}"}'
