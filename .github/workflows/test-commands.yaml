name: DevOps Test

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy
        type: choice
        options:
          - dev
          - ci
          - qa
          - uat
          - production
      check_version:
        description: Should I check version?
        required: false
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  branch-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Env
      run: |
        echo "${{inputs.environment}}"

  wait-api-reconcile:
    needs: [branch-validation]
    name: Wait for Flux API Reconciliation
    if: inputs.check_version == 'true'
    uses: ./.github/workflows/testpipe1.yaml
    with:
      ENVIRONMENT_NAME: ${{ inputs.environment }}

  wait-api-reconcile-east:
    needs: [branch-validation]
    name: Wait for Flux API Reconciliation East
    if: inputs.check_version == 'true' && (${{ inputs.environment }} == 'production' || ${{ inputs.environment }} == 'uat' || ${{ inputs.environment }} == 'ci')
    uses: ./.github/workflows/testpipe2.yaml
    with:
      ENVIRONMENT_NAME: ${{ inputs.environment }}

# jobs:
#   export_custom_value:
#     runs-on: ubuntu-latest
#     outputs:
#       run_id: ${{ steps.set_output.outputs.run_id }}
#     steps:
#       - name: Install PostgreSQL Client
#         run: |
#           sudo apt-get install -y postgresql-client
          
#       - name: Set Custom Output
#         id: set_output
#         run: |
#           echo "test"
  
  
  
  
  # echo "run_id=${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT

  # use_custom_value:
  #   runs-on: ubuntu-latest
  #   needs: export_custom_value
  #   steps:
  #     - name: Use the Custom Output
  #       run: |
  #         echo "The exported GITHUB_RUN_ID is: ${{ needs.export_custom_value.outputs.run_id }}"


      
      # - name: Set current_date
      #   run: |
      #     current_date=$(date +'%B %Y')
      #     echo "MONTH_YEAR=$current_date"

      #     closest_future_version=$(jq -r --arg today "$current_date" '
      #     map(select((.description == "Planned Deployments") and (.startDate >= $today)))')

      #     echo "Closest future fixVersion is: $closest_future_version"
  
